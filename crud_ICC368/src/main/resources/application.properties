spring.application.name=crud_ICC368
spring.datasource.url=jdbc:mysql://192.168.1.21:3306/museo2
spring.datasource.username=usuario_remoto
spring.datasource.password=Cla-Ve-Se-Gu-Ra-77
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.jpa.show-sql=true
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
spring.jpa.hibernate.ddl-auto=none

# create: Hibernate borrará y recreará las tablas cada vez que se inicie la aplicación.
# Ten cuidado, ya que esto puede causar la pérdida de datos existentes en la base de datos.
#
# update: Hibernate actualizará el esquema de la base de datos para que coincida con el modelo de datos de las entidades JPA.
# Esto incluye la creación de nuevas tablas, columnas y restricciones, pero no borrará las tablas existentes ni los datos.
# Sin embargo, esta estrategia puede no funcionar perfectamente en todos los casos, especialmente en esquemas de base de datos complejos.
#
# validate: Hibernate validaría el esquema de la base de datos en comparación con el modelo de datos de las entidades JPA,
# pero no realizaría ninguna acción para cambiar el esquema de la base de datos.
# Se utiliza para verificar si el esquema de la base de datos coincide con el modelo de datos sin realizar modificaciones en la base de datos.
#
# create-drop: Similar a "create", Hibernate borrará y recreará las tablas cada vez que se inicie la aplicación,
# pero también las eliminará cuando se detenga la aplicación.
# Es útil para entornos de desarrollo donde no se requiere persistencia de datos entre ejecuciones.
#
# none: Hibernate no realizará ninguna operación relacionada con la creación o actualización del esquema de la base de datos.
# Es útil si quieres que la base de datos sea gestionada externamente y no deseas que Hibernate realice cambios en ella.

